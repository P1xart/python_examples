#Функции Python
#Ключевое слово - def
def name_func(argument1, argument2, argument3...):
    pass
#Функции могут быть анонимные и наоборот. 
#Поговорим об не анонимных.

def multiple(num1, num2):
    result = num1 * num2
    
    return result

res, word = multiple(5, 2)
print(res, word) # 10

#Разберем нашу функцию
#Объявляем функцию с помощью def <название>():
#В скобках могут не передаваться или передаваться неограниченное количество аргументов, которые могут быть использованы только в блоке функции.
#Можно передать только нужные аргументы, остальные примут значения по умолчанию для своего типа данных.
res, word = multiple(num2=5):
print(res, word) # 0
#num1 приняло 0, поэтому при перемножении получился 0.
#Каждая функция по сути своей должна что-то возвращать, как результат её выполнения.
#Из функции можно вернуть какую-то переменную(ые) с помощью колючевого слово return <переменная(ые)>.
#Для аргументов можно задать значения по умолчанию, которые будут применены, если не буду переданы другие.
def multiple(num1, num2=6, strin="ABC"):
    result = num1 * num2
    return result, strin

res, word = multiple(num1=2, strin="Not ABC"):
print(res, word) # 12, Not ABC

#Готовую функцию можно вызывать неограниченное количество раз. Как вы уже поняли, она вызывается как <название>(<Аргументы>)
#Передавать не обязательно, можно брать переменные из глобальной зоны видимости.
num1 = 10
num2 = 2

def multiple():
    return num1*num2

print(multiple()) # 20
#Да, можно делать и так! Напрямую передавать возвращаемую операцию в return и вызываемую функцию в print
#Функции могут быть обьявлены и использованы много где. В циклах, в функциях (Функция в функции)
