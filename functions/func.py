#Функции Python

def name_func(argument1, argument2, argument3...):
    pass #pass - пропустить

#Функции могут быть анонимные и наоборот. 
#Поговорим об не анонимных.

def multiple(num1=0, num2=12, strin=""): #num1=12 - обьявление значения перменной по умолчанию. Т.е. может быть просто num1, ...
    result = num1*num2, strin
    return result, strin

res, word = multiple(num2=5) #Переопределили num2 со 12 до 5
print(res, word) # 0
#num1 по умолчанию - 0, а strin - "" (Пустая  строка), поэтому при перемножении получился 0, а выводе строки - ничего.
res, word = multiple(num1=2, strin="Not ABC")
print(res, word) # 12, Not ABC

#Объявляем функцию с помощью def <название>():
#В скобках могут не передаваться или передаваться неограниченное количество аргументов (Если для них есть аргумент или *args/**kwargs), которые могут быть использованы только в блоке функции.
#Можно передать только нужные аргументы, но нужно указать значения аргументов по умолчанию, это называется позиционные агрументы. Неиспользованные аргументы примут именно это значение.
#Из функции можно (И даже нужно) вернуть какую-то переменную(ые) как результат её исполнения с помощью колючевого слово return <переменная(ые)>.

#Готовую функцию можно вызывать неограниченное количество раз. Как вы уже поняли, она вызывается как <название>(<Аргументы>)
#Передавать аргументы не обязательно, можно брать переменные из глобальной зоны видимости.

num1 = 10
num2 = 2

def multiple():
    return num1*num2

print("Значние:", multiple()) # Значение: 20

#Да, можно делать и так! Напрямую передавать возвращаемую операцию в return и вызываемую функцию в print
#Функции могут быть обьявлены и использованы много где. В циклах, в функциях (Функция в функции)

def multiple(*args):
    total = 0
    for value in args:
        total += value
    return total

res = multiple(1, 100, 5, 9)
print(res) # 115

#Передача неограниченного числа аргументов в массив